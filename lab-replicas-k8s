ms replica k8s
# plan
(dazyc do orchestracji i przyczyna to skomplikowany przypadek)
(simple example fokus on subcject zerodowntown, deploy strategy and replicas)
deploy strategy: rollout, blue-green, canary (based on replicas all strategy)
lab:
# cmd 
apt install podman-docker
alias p=podman
p login docker.io
cd /ms/nginx1
echo 'app 1.0' > index.html
#Dockerfile
FROM docker.io/library/nginx
COPY index.html /usr/share/nginx/html/index.html
p build -t docker.io/n507592979/ms:v12 .
p push docker.io/n507592979/ms:v12

https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/


> scenario 1
while true; do curl master:30011;date;sleep 1;clear;done
watch kubectl get po -owide

apiVersion: v1
kind: Pod
metadata:
  name: app
  labels:
    app: app
spec:
  containers:
  - name: app
    image: docker.io/n507592979/ms:v4
  imagePullSecrets:
  - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: app
  name: app
spec:
  ports:
  - nodePort: 30011
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: app
  sessionAffinity: None
  type: NodePort


chenge wersion and show downtime, do this how whole process looks

/2/
replicas deployment and scaling, rollout and stretegy deploy part

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: app
  name: app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: app
    spec:
      containers:
      - image: docker.io/n507592979/ms:v4
        name: ms
        resources: {}
status: {}


k rollout undo - wycofanie sie 

/3/ blue-green
set up two indentical enviroment refer to blue and green. Both shoudl have the same resource and configuration.
Deploy a new version to Inactive Enviroment, blue currently serve to produciton trafic. You would deploy a new wersion to the green deployment
Test green deployment: before SWITCHING trafic test new version 
Switch trafic from the blue to the green. This could be done by updateing a load balancer configuration or DNS setting to direct trafic to the green enviroment.
Show benefits on this solution, wane is a zerodwon time and posibility to downgrade.

apiVersion: v1
kind: Service
metadata:
  labels:
    app: blue
  name: blue-green
spec:
  ports:
  - nodePort: 30022
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: blue
  sessionAffinity: None
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: blue
  name: app-b
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blue
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: blue
    spec:
      containers:
      - image: docker.io/n507592979/ms:v3
        name: ms
        resources: {}
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: green
  name: app-g
spec:
  replicas: 1
  selector:
    matchLabels:
      app: green
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: green
    spec:
      containers:
      - image: docker.io/n507592979/ms:v4
        name: ms
        resources: {}
status: {}


/3/ canary deployment
deploy current version
deploy the nw version
route trafic to of small percent eg 5%-10%, do this ba decres incresase replicas



